akka {
 
  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]
 
  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"
 
  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"
 
  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
 
  actor {
      
          # to allow actors created remotely
          #     deployment{
          #             "/master/singleton/repository-*" {
          #                  remote = "akka.tcp://example-system@127.0.0.1:2552"
          #                  max-nr-of-instances-per-node = 1
          #             }
          #     }
          #   provider = "akka.remote.RemoteActorRefProvider"
      
      
       # How to create cluster aware routers
       # for aggregators under the singleton : 
       #    /user/master/singleton/aggregator-0 ?
       #
       # Lets try to create Pool-router        
       deployment{
              # /user/master/singleton/aggRouter
              /master/singleton/aggRouter {
                  router = consistent-hashing-group
                  routees.paths = ["/user/aggRouter"]
                  cluster {
                    enabled = on
                    allow-local-routees = on
                    # use-role = compute
                  }
                }
       }
      
      
    provider = "akka.cluster.ClusterActorRefProvider"
    
  }
  
  remote {
    transport = "akka.remote.netty.NettyRemoteTransport"
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0
    }
  }
  
  cluster {
    # The seed nodes are configured contact points for initial, automatic, join of the cluster.
    seed-nodes = [
      "akka.tcp://example-system@127.0.0.1:2551"]
 
    auto-down-unreachable-after = 10s
  }
}